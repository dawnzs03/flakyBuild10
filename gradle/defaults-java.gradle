import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

ext.vendor = { ->
    // By specifying the vendor, we force us (and CI) to
    // use that specific JDK version. If it is not locally
    // available, Gradle will provision the toolchain, i.e.
    // download it.
    if (project.hasProperty("javaLanguageVendor")) {
        return JvmVendorSpec.matching(project.property('javaLanguageVendor'))
    } else {
        return JvmVendorSpec.ADOPTIUM
    }
}

ext.languageVersion = { ->
    if (project.hasProperty("javaLanguageVersion")) {
        return JavaLanguageVersion.of(project.property('javaLanguageVersion'))
    } else if (ver.'neo4j'.startsWith('5.')) {
        return JavaLanguageVersion.of(17)
    } else {
        return JavaLanguageVersion.of(11)
    }
}

allprojects {
    plugins.withType(JavaLibraryPlugin).configureEach {

        repositories {
            mavenCentral()
            if (project.hasProperty('pipelineRepository')) {
                maven {
                    url = "file://${project.getProperty('pipelineRepository')}"
                }
            }
            maven {
                name = 'teamcity-artifacts'
                url = "file://${rootProject.projectDir}/neo4j-repo"
            }
        }

        tasks.register("sourcesJar", Jar) {
            archiveClassifier = 'sources'
            from(sourceSets.main.allJava)
        }

        javadoc {
            StandardJavadocDocletOptions opts = (options as StandardJavadocDocletOptions)
            opts.addBooleanOption('Xdoclint:all,-missing', true)
        }

        tasks.register("javadocJar", Jar) {
            archiveClassifier = 'javadoc'
            from javadoc
        }

        test {
            debugOptions {
                enabled = project.hasProperty('test-debug')
                port = 5425
                server = true
                suspend = true
            }

            // Since JDK 17 the default access to the following
            // packages is "deny". We need to open them in order
            // to gain access in GDS / Neo4j.
            jvmArgs += '--add-opens=java.base/java.lang=ALL-UNNAMED'
            jvmArgs += '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED'
            jvmArgs += '--add-opens=java.base/java.nio=ALL-UNNAMED'
            jvmArgs += '--add-opens=java.base/java.util.stream=ALL-UNNAMED'
            jvmArgs += '--add-opens=java.base/sun.net.www.protocol.http=ALL-UNNAMED'
            jvmArgs += '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED'
            jvmArgs += '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
            jvmArgs += '--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED'

            // enable this to check for unintended use of boxed primitive iterators
            // note that this flag might cause OOMs on CI

            // systemProperty "org.openjdk.java.util.stream.tripwire", "true"
            // testLogging { events "standardError" }

            systemProperty "org.neo4j.gds.utils.GdsFeatureToggles.throwWhenUsingProgressTrackerWithoutTasks", "true"

            maxHeapSize = "4G"
            useJUnitPlatform {
                includeEngines 'junit-jupiter'
                includeEngines 'jqwik'
            }

            // enable verbose test logging
            testLogging {
                // set options for log level LIFECYCLE (the default)
                lifecycle {
                    events TestLogEvent.FAILED
                    exceptionFormat TestExceptionFormat.FULL
                    showExceptions true
                }

                // set options for log level INFO
                info {
                    events TestLogEvent.FAILED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR,
                        TestLogEvent.STANDARD_OUT
                    exceptionFormat TestExceptionFormat.FULL
                    showExceptions true
                }

                // set options for log level DEBUG
                debug {
                    events TestLogEvent.STARTED,
                        TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR,
                        TestLogEvent.STANDARD_OUT
                    exceptionFormat TestExceptionFormat.FULL
                    showExceptions true
                    showCauses true
                    showStackTraces true
                }

                afterSuite { desc, result ->
                    if (!desc.parent) { // will match the outermost suite
                        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    }
                }
            }
        }

        tasks.withType(JavaCompile).configureEach {
            options.warnings = true
            options.encoding = 'UTF-8'

            // Since JDK 17 the default access to the following
            // packages is "deny". We need to open them in order
            // to gain access in GDS / Neo4j.
            options.forkOptions.jvmArgs += '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED'
            options.forkOptions.jvmArgs += '--add-opens=java.base/java.nio=ALL-UNNAMED'
            options.forkOptions.jvmArgs += '--add-opens=java.base/java.util.stream=ALL-UNNAMED'
            options.forkOptions.jvmArgs += '--add-opens=java.base/sun.net.www.protocol.http=ALL-UNNAMED'
            options.forkOptions.jvmArgs += '--add-opens=java.base/java.lang=ALL-UNNAMED'

            options.compilerArgs += [
                    '-parameters',
                    '-Xlint:all,-cast,-deprecation,-processing,-serial,-try,-unchecked,-varargs,-rawtypes,-removal',
                    '-Xmaxerrs', '1337'
            ]
        }

        tasks.withType(Jar).configureEach {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }

        afterEvaluate {
            if (group.startsWith('com.neo4j.gds')) {
                javadoc {
                    enabled false
                }
            }
        }
    }

}
